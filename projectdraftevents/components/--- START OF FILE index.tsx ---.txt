--- START OF FILE index.tsx ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);--- START OF FILE metadata.json ---

{
  "name": "Copy of Iraq Events Platform",
  "description": "A dynamic, responsive web application for discovering and managing events across major Iraqi cities. Features an interactive, auto-scrolling discovery bar with 3D city filters and glowing category filters. Includes comprehensive event creation forms, detailed event views with integrated chat and WhatsApp contact, a review and comment system, and social sharing capabilities. Supports both Arabic (RTL) and English languages.",
  "requestFramePermissions": []
}--- START OF FILE index.html ---

<!DOCTYPE html>
<html lang="ar" dir="rtl">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Iraq Events Platform</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdn.tailwindcss.com"></script>
  <script type="importmap">
{
  "imports": {
    "@google/genai": "https://aistudiocdn.com/@google/genai@^1.19.0",
    "react/": "https://aistudiocdn.com/react@^19.1.1/",
    "react": "https://aistudiocdn.com/react@^19.1.1",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.1.1/",
    "react-dom/client": "https://aistudiocdn.com/react-dom@^19.1.1/client"
  }
}
</script>
</head>
  <body>
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
  </body>
</html>--- START OF FILE types.ts ---

// FIX: Add 'ku' as an optional property to the Translatable interface to support Kurdish language translations used in mock data.
export interface Translatable {
  en: string;
  ar: string;
  ku?: string;
}

export interface City {
  id: string;
  name: Translatable;
  image: string;
}

// FIX: Update the Category interface to be more flexible. Made 'name' optional and added optional 'translation_key' and 'icon' properties to support different data structures for categories in the app.
export interface Category {
  id: string;
  name: Translatable;
  image: string;
  translation_key?: string;
  icon?: string;
}

export interface User {
  id: string;
  name: string;
  avatarUrl: string;
}

export interface Review {
  id: string;
  user: User;
  rating: number; // 1-5
  comment: string;
  timestamp: string;
}

export interface Event {
  id: string;
  title: string;
  organizerId: string;
  organizerName: string;
  categoryId: string;
  cityId: string;
  date: string;
  venue: string;
  description: string;
  organizerPhone: string;
  imageUrl: string;
  reviews: Review[];
  coordinates?: { lat: number; lon: number };
}

// FIX: Add Language type definition. It was moved from App.tsx to be a shared type.
export type Language = 'en' | 'ar' | 'ku';

export type AuthMode = 'login' | 'signup' | 'forgot-password';

// FIX: Add AISuggestionResponse interface definition, which was missing.
export interface AISuggestionResponse {
  suggestedCategoryId: string;
  suggestedCityId: string;
  generatedImageBase64: string;
}

// FIX: Add AppliedAIData interface definition, which was missing.
export interface AppliedAIData {
  title: string;
  description: string;
  date: string;
  categoryId: string;
  cityId: string;
  imageBase64: string;
}--- START OF FILE components/icons/LogoIcon.tsx ---


import React from 'react';

export const LogoIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    className={className}
    viewBox="0 0 100 100"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M50 0C22.3858 0 0 22.3858 0 50C0 77.6142 22.3858 100 50 100C77.6142 100 100 77.6142 100 50C100 22.3858 77.6142 0 50 0ZM50 88.2353C28.8431 88.2353 11.7647 71.1569 11.7647 50C11.7647 28.8431 28.8431 11.7647 50 11.7647C71.1569 11.7647 88.2353 28.8431 88.2353 50C88.2353 71.1569 71.1569 88.2353 50 88.2353Z"
      fill="currentColor"
    />
    <path
      d="M50 29.4118C38.6275 29.4118 29.4118 38.6275 29.4118 50C29.4118 61.3725 38.6275 70.5882 50 70.5882C61.3725 70.5882 70.5882 61.3725 70.5882 50C70.5882 38.6275 61.3725 29.4118 50 29.4118Z"
      fill="currentColor"
    />
  </svg>
);--- START OF FILE components/icons/FlagIcons.tsx ---


import React from 'react';

export const KurdistanFlag: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 450">
    <rect width="900" height="450" fill="#ED2E38"/>
    <rect width="900" height="300" fill="#FFF"/>
    <rect width="900" height="150" fill="#007A3D"/>
    <circle cx="450" cy="225" r="80" fill="#FEBF19"/>
    <circle cx="450" cy="225" r="70" fill="#FFF"/>
    <path d="M450,155 v140 a70,70 0 0,0 0,-140" fill="#FEBF19"/>
    <g transform="translate(450,225)">
      <g id="ray">
        <path d="M0,-100 20,0 -20,0 z" fill="#FEBF19" transform="rotate(8.5)"/>
        <path d="M0,-100 20,0 -20,0 z" fill="#FEBF19" transform="rotate(-8.5)"/>
      </g>
      <use href="#ray" transform="rotate(17)"/>
      <use href="#ray" transform="rotate(34)"/>
      <use href="#ray" transform="rotate(51)"/>
      <use href="#ray" transform="rotate(68)"/>
      <use href="#ray" transform="rotate(85)"/>
      <use href="#ray" transform="rotate(102)"/>
      <use href="#ray" transform="rotate(119)"/>
      <use href="#ray" transform="rotate(136)"/>
      <use href="#ray" transform="rotate(153)"/>
      <use href="#ray" transform="rotate(170)"/>
      <use href="#ray" transform="rotate(187)"/>
      <use href="#ray" transform="rotate(204)"/>
      <use href="#ray" transform="rotate(221)"/>
      <use href="#ray" transform="rotate(248)"/>
      <use href="#ray" transform="rotate(265)"/>
      <use href="#ray" transform="rotate(282)"/>
      <use href="#ray" transform="rotate(299)"/>
      <use href="#ray" transform="rotate(316)"/>
      <use href="#ray" transform="rotate(333)"/>
      <use href="#ray" transform="rotate(350)"/>
    </g>
  </svg>
);

export const IraqFlag: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 600">
    <rect width="900" height="600" fill="#ce1126"/>
    <rect width="900" height="400" fill="#fff"/>
    <rect width="900" height="200" fill="#000"/>
    <text x="450" y="350" font-family="Kufi" font-size="120" fill="#007a3d" text-anchor="middle">الله أكبر</text>
  </svg>
);

export const USFlag: React.FC<{ className?: string }> = ({ className }) => (
    <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1235 650">
        <rect width="1235" height="650" fill="#b22234"/>
        <path d="M0,50H1235M0,150H1235M0,250H1235M0,350H1235M0,450H1235M0,550H1235" stroke="#fff" stroke-width="50"/>
        <rect width="494" height="350" fill="#3c3b6e"/>
    </svg>
);--- START OF FILE components/icons/LucideIcons.tsx ---


import React from 'react';

export const MusicIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle>
    </svg>
);

export const ArtIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
    </svg>
);

export const FoodIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M3 11h18c.8 0 1.5.7 1.5 1.5v0c0 .8-.7 1.5-1.5 1.5H3c-.8 0-1.5-.7-1.5-1.5v0C1.5 11.7.2 11 3 11z"></path><path d="M12 11V5c0-1.7-1.3-3-3-3H9c-1.7 0-3 1.3-3 3v6"></path><path d="M12 21c-1.7 0-3-1.3-3-3v-4h6v4c0 1.7-1.3 3-3 3z"></path>
    </svg>
);

export const TechIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line>
    </svg>
);--- START OF FILE hooks/useMockData.ts ---



import { useState, useMemo } from 'react';
import type { Event, City, Category, User } from '../types';

const users: User[] = [
    // FIX: Renamed 'profile_picture_url' to 'avatarUrl' to match the User type.
    { id: 'user-1', name: 'Salar Salah', avatarUrl: 'https://picsum.photos/seed/user1/100' },
    // FIX: Renamed 'profile_picture_url' to 'avatarUrl' to match the User type.
    { id: 'user-2', name: 'Layla Ahmed', avatarUrl: 'https://picsum.photos/seed/user2/100' },
];

const cities: City[] = [
    // FIX: Added missing 'image' property to match the City type.
    { id: 'city-1', name: { en: 'Erbil', ar: 'أربيل', ku: 'هەولێر' }, image: 'https://picsum.photos/seed/erbil/200' },
    { id: 'city-2', name: { en: 'Sulaymaniyah', ar: 'السليمانية', ku: 'سلێمانی' }, image: 'https://picsum.photos/seed/sulaymaniyah/200' },
    { id: 'city-3', name: { en: 'Duhok', ar: 'دهوك', ku: 'دهۆک' }, image: 'https://picsum.photos/seed/duhok/200' },
    { id: 'city-4', name: { en: 'Baghdad', ar: 'بغداد', ku: 'بەغدا' }, image: 'https://picsum.photos/seed/baghdad/200' },
];

const categories: Category[] = [
    // FIX: The Category type was updated to allow 'translation_key' and 'icon', so this data is now valid.
    // FIX: Added missing 'name' property to each category to make them conform to the 'Category' type.
    // FIX: Added missing 'image' property to match the Category type.
    { id: 'cat-1', name: { en: 'Music', ar: 'موسيقى', ku: 'مۆسیقا' }, translation_key: 'music', icon: 'MusicIcon', image: 'https://picsum.photos/seed/music/200' },
    { id: 'cat-2', name: { en: 'Art & Culture', ar: 'فن وثقافة', ku: 'هونەر و کەلتور' }, translation_key: 'art_culture', icon: 'ArtIcon', image: 'https://picsum.photos/seed/art/200' },
    { id: 'cat-3', name: { en: 'Food & Drink', ar: 'طعام وشراب', ku: 'خواردن و خواردنەوە' }, translation_key: 'food_drink', icon: 'FoodIcon', image: 'https://picsum.photos/seed/food/200' },
    { id: 'cat-4', name: { en: 'Tech', ar: 'تكنولوجيا', ku: 'تەکنەلۆژیا' }, translation_key: 'tech', icon: 'TechIcon', image: 'https://picsum.photos/seed/tech/200' },
];

// FIX: Restructured the events data to conform to the 'Event' type from types.ts.
const events: Event[] = [
    {
        id: 'event-1',
        title: 'Erbil International Tech Summit',
        description: 'Join the brightest minds in tech...',
        date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Saad Abdullah Palace, Erbil',
        imageUrl: 'https://picsum.photos/seed/event1/800/600',
        // FIX: Add missing 'organizerId' to conform to Event type
        organizerId: users[0].id,
        organizerName: users[0].name,
        organizerPhone: '+9647501112233',
        cityId: 'city-1',
        categoryId: 'cat-4',
        coordinates: { lat: 36.1911, lon: 44.0094 },
        reviews: [],
    },
    {
        id: 'event-2',
        title: 'Traditional Kurdish Music Night',
        description: 'An evening of soulful melodies...',
        date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Chavi Land, Sulaymaniyah',
        imageUrl: 'https://picsum.photos/seed/event2/800/600',
        // FIX: Add missing 'organizerId' to conform to Event type
        organizerId: users[1].id,
        organizerName: users[1].name,
        organizerPhone: '+9647702223344',
        cityId: 'city-2',
        categoryId: 'cat-1',
        coordinates: { lat: 35.5606, lon: 45.4735 },
        reviews: [],
    },
    {
        id: 'event-3',
        title: 'Baghdad Art Exhibition',
        description: 'Featuring modern Iraqi artists...',
        date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Iraqi Museum, Baghdad',
        imageUrl: 'https://picsum.photos/seed/event3/800/600',
        // FIX: Add missing 'organizerId' to conform to Event type
        organizerId: users[0].id,
        organizerName: users[0].name,
        organizerPhone: '+9647803334455',
        cityId: 'city-4',
        categoryId: 'cat-2',
        coordinates: { lat: 33.3276, lon: 44.3855 },
        reviews: [],
    },
     {
        id: 'event-4',
        title: 'Duhok Food Festival',
        description: 'Taste the best of local cuisine...',
        date: new Date(Date.now() + 35 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Azadi Park, Duhok',
        imageUrl: 'https://picsum.photos/seed/event4/800/600',
        // FIX: Add missing 'organizerId' to conform to Event type
        organizerId: users[1].id,
        organizerName: users[1].name,
        organizerPhone: '+9647514445566',
        cityId: 'city-3',
        categoryId: 'cat-3',
        coordinates: { lat: 36.8625, lon: 42.9868 },
        reviews: [],
    },
];

export function useMockData() {
    return useMemo(() => ({
        users,
        cities,
        categories,
        events,
    }), []);
}--- START OF FILE services/geminiService.ts ---



import { GoogleGenAI, Type } from "@google/genai";
// FIX: Import the newly added AISuggestionResponse type.
import type { City, Category, AISuggestionResponse } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // This is a fallback for development environments.
  // In a real production app, the key should be securely handled.
  console.warn("API_KEY is not set. AI features will be disabled.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

export const getSuggestionsForEvent = async (
    title: string,
    description: string,
    cities: City[],
    categories: Category[]
): Promise<AISuggestionResponse> => {
    if (!API_KEY) {
        throw new Error("API key is not configured.");
    }

    const cityContext = cities.map(c => ({ id: c.id, name: c.name.en }));
    // FIX: Use optional chaining for 'translation_key' as it's now optional on the Category type.
    const categoryContext = categories.map(c => ({ id: c.id, name: c.translation_key?.replace(/_/g, ' ') }));

    try {
        // Step 1: Get suggestions and image prompt from text model
        const textModel = 'gemini-2.5-flash';
        const systemInstruction = `You are an event planning assistant. Based on the event title and description, suggest the most relevant cityId and categoryId from the provided lists. Also, create a simple, descriptive prompt for an AI image generator to create an event cover image.

        Available cities: ${JSON.stringify(cityContext)}
        Available categories: ${JSON.stringify(categoryContext)}
        `;

        const textResponse = await ai.models.generateContent({
            model: textModel,
            contents: `Event Title: "${title}"\nEvent Description: "${description}"`,
            config: {
                systemInstruction: systemInstruction,
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        suggestedCategoryId: {
                            type: Type.STRING,
                            description: "The ID of the most relevant category."
                        },
                        suggestedCityId: {
                            type: Type.STRING,
                            description: "The ID of the most relevant city."
                        },
                        imagePrompt: {
                            type: Type.STRING,
                            description: "A simple, clean prompt for an image generator (e.g., 'A vibrant concert with a cheering crowd at night')."
                        }
                    },
                    required: ["suggestedCategoryId", "suggestedCityId", "imagePrompt"]
                },
            },
        });

        const suggestions = JSON.parse(textResponse.text.trim());
        const { suggestedCategoryId, suggestedCityId, imagePrompt } = suggestions;
        
        // Step 2: Generate image using the prompt
        const imageModel = 'imagen-4.0-generate-001';
        const imageResponse = await ai.models.generateImages({
            model: imageModel,
            prompt: imagePrompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
            },
        });

        const generatedImageBase64 = imageResponse.generatedImages[0].image.imageBytes;

        if (!generatedImageBase64) {
            throw new Error("Image generation failed.");
        }

        return {
            suggestedCategoryId,
            suggestedCityId,
            generatedImageBase64,
        };
    } catch (error) {
        console.error("Error getting AI suggestions:", error);
        throw new Error("Failed to generate AI suggestions. Please try again.");
    }
};--- START OF FILE components/LanguageSwitcher.tsx ---

import React, { useState, useRef, useEffect } from 'react';
import { KurdistanFlag, IraqFlag, USFlag } from './icons/FlagIcons';

type Language = 'en' | 'ar' | 'ku';
type LanguageOption = {
    code: Language;
    name: string;
    flag: React.ComponentType<{ className?: string }>;
};

const languageOptions: LanguageOption[] = [
    { code: 'ku', name: 'کوردی', flag: KurdistanFlag },
    { code: 'ar', name: 'عربي', flag: IraqFlag },
    { code: 'en', name: 'English', flag: USFlag },
];

interface LanguageSwitcherProps {
    currentLang: Language;
    onLangChange: (lang: Language) => void;
}

export const LanguageSwitcher: React.FC<LanguageSwitcherProps> = ({ currentLang, onLangChange }) => {
    const [isOpen, setIsOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const selectedLanguage = languageOptions.find(opt => opt.code === currentLang) || languageOptions[2];

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    const handleSelect = (lang: Language) => {
        onLangChange(lang);
        setIsOpen(false);
    };

    return (
        <div className="relative" ref={dropdownRef}>
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 focus:ring-amber-500"
            >
                <selectedLanguage.flag className="w-5 h-auto rounded-sm" />
                <span>{selectedLanguage.name}</span>
                <svg className="-mr-1 ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
            </button>
            {isOpen && (
                <div className="absolute right-0 rtl:right-auto rtl:left-0 mt-2 w-40 rounded-md shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5 z-10 border border-gray-700">
                    <div className="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                        {languageOptions.map((option) => (
                            <button
                                key={option.code}
                                onClick={() => handleSelect(option.code)}
                                className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 text-left"
                                role="menuitem"
                            >
                                <option.flag className="w-5 h-auto rounded-sm" />
                                <span>{option.name}</span>
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};--- START OF FILE components/AIAssistantModal.tsx ---



import React, { useState, useEffect } from 'react';
// FIX: Import the newly added AISuggestionResponse and AppliedAIData types.
import type { City, Category, AISuggestionResponse, AppliedAIData } from '../types';
import { getSuggestionsForEvent } from '../services/geminiService';

interface AIAssistantModalProps {
  isOpen: boolean;
  onClose: () => void;
  onApply: (data: AppliedAIData) => void;
  cities: City[];
  categories: Category[];
}

export const AIAssistantModal: React.FC<AIAssistantModalProps> = ({ isOpen, onClose, onApply, cities, categories }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState('');

  const [suggestions, setSuggestions] = useState<AISuggestionResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isOpen) {
        setTitle('');
        setDescription('');
        setDate('');
        setSuggestions(null);
        setError(null);
        setIsLoading(false);
    }
  }, [isOpen]);

  const handleGetSuggestions = async () => {
    if (!title || !description) {
      setError('Please enter a title and description for your event.');
      return;
    }
    setError(null);
    setIsLoading(true);
    setSuggestions(null);
    try {
      const result = await getSuggestionsForEvent(title, description, cities, categories);
      setSuggestions(result);
    } catch (e) {
      setError((e as Error).message);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleApply = () => {
    if (!suggestions) return;
    onApply({
        title,
        description,
        date,
        categoryId: suggestions.suggestedCategoryId,
        cityId: suggestions.suggestedCityId,
        imageBase64: suggestions.generatedImageBase64,
    });
    onClose();
  };

  const handleClose = () => {
    if (!isLoading) {
      onClose();
    }
  }

  if (!isOpen) return null;

  const inputClasses = "mt-1 block w-full px-3 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-600";

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-start z-50 p-4 overflow-y-auto">
      <div className="bg-gray-800 text-gray-200 rounded-lg shadow-xl w-full max-w-2xl p-6 my-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-gray-100">AI Event Assistant</h2>
          <button onClick={handleClose} disabled={isLoading} className="text-gray-500 hover:text-gray-300 disabled:opacity-50 text-2xl leading-none">&times;</button>
        </div>
        
        <div className="space-y-4">
            <div>
                <label htmlFor="event-title" className="block text-sm font-medium text-gray-400">Event Title</label>
                <input type="text" id="event-title" value={title} onChange={(e) => setTitle(e.target.value)}
                    className={inputClasses}
                    placeholder="e.g., International Tech Summit" disabled={!!suggestions || isLoading} />
            </div>
            <div>
                <label htmlFor="event-description" className="block text-sm font-medium text-gray-400">Description</label>
                <textarea id="event-description" value={description} onChange={(e) => setDescription(e.target.value)}
                    rows={4}
                    className={inputClasses}
                    placeholder="Describe your event..." disabled={!!suggestions || isLoading} />
            </div>
             <div>
                <label htmlFor="event-date" className="block text-sm font-medium text-gray-400">Date</label>
                <input type="datetime-local" id="event-date" value={date} onChange={(e) => setDate(e.target.value)}
                    className={inputClasses}
                    disabled={!!suggestions || isLoading} />
            </div>
        </div>

        {error && <p className="text-red-400 text-sm mt-4">{error}</p>}
        
        {isLoading && (
            <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-400"></div>
                <p className="mt-4 text-gray-400">AI is working its magic...</p>
            </div>
        )}

        {suggestions && (
            <div className="mt-6 border-t border-gray-700 pt-6">
                <h3 className="text-xl font-semibold text-gray-100 mb-4">✨ AI Suggestions</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <p className="font-medium text-gray-400">Suggested Category:</p>
                        {/* FIX: Use optional chaining for 'translation_key' as it is now optional on the Category type. */}
                        <p className="text-indigo-400 font-semibold">{categories.find(c => c.id === suggestions.suggestedCategoryId)?.translation_key?.replace(/_/g, ' ') || 'Unknown'}</p>
                        <p className="font-medium text-gray-400 mt-4">Suggested City:</p>
                        <p className="text-indigo-400 font-semibold">{cities.find(c => c.id === suggestions.suggestedCityId)?.name.en || 'Unknown'}</p>
                    </div>
                    <div>
                         <p className="font-medium text-gray-400 mb-2">Generated Image Preview:</p>
                         <img 
                            src={`data:image/png;base64,${suggestions.generatedImageBase64}`} 
                            alt="AI generated event" 
                            className="rounded-lg shadow-md w-full h-auto object-cover"
                         />
                    </div>
                </div>
            </div>
        )}

        <div className="mt-8 flex justify-end gap-3">
          <button onClick={handleClose} disabled={isLoading}
            className="px-4 py-2 bg-gray-600 text-gray-200 rounded-md hover:bg-gray-500 disabled:opacity-50">
            Cancel
          </button>
          
          {!suggestions ? (
            <button onClick={handleGetSuggestions} disabled={isLoading}
              className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-400 flex items-center justify-center w-48">
              {isLoading ? 'Thinking...' : 'Get AI Suggestions'}
            </button>
          ) : (
            <button onClick={handleApply}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
              Apply Suggestions
            </button>
          )}
        </div>
      </div>
    </div>
  );
};--- START OF FILE App.tsx ---

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { Header } from './components/Header';
import { DiscoveryBar } from './components/DiscoveryBar';
import { EventGrid } from './components/EventGrid';
import { CreateEventModal } from './components/CreateEventModal';
import { EventDetailModal } from './components/EventDetailModal';
import { AIAssistantModal } from './components/AIAssistantModal';
import { cities, categories, initialEvents, users, featuredEvents } from './data';
import type { Event, Review, Language, AppliedAIData, User, AuthMode } from './types';
import { FeaturedCarousel } from './components/FeaturedCarousel';
import { SearchBar } from './components/SearchBar';
import { AuthModal } from './components/AuthModal';
import { UserProfileModal } from './components/UserProfileModal';

const GlobalStyles = () => (
    <style>{`
      @keyframes scroll {
        0% { transform: translateX(0); }
        100% { transform: translateX(-50%); }
      }
      @keyframes scroll-reverse {
        0% { transform: translateX(-50%); }
        100% { transform: translateX(0); }
      }
      .scroller-container {
        overflow: hidden;
        -webkit-mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
        mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
      }
      .scroller {
        display: flex;
        width: max-content;
        animation: scroll 40s linear infinite;
      }
      .scroller:hover {
        animation-play-state: paused;
      }
      .scroller-container:dir(rtl) .scroller {
        animation-direction: reverse;
      }

      .visual-filter-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex-shrink: 0;
        width: 7rem;
        margin: 0 0.5rem;
        position: relative;
        border: 3px solid transparent;
        border-radius: 9999px; /* This will apply to the container for the glow */
        transition: all 0.3s;
        padding: 0.25rem;
        background: transparent;
        cursor: pointer;
      }
      .visual-filter-btn img {
        width: 5.5rem;
        height: 5.5rem;
        border-radius: 9999px;
        object-fit: cover;
        border: 2px solid #4B5563; /* Gray border */
        transition: all 0.3s;
      }
      .visual-filter-btn span {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        font-weight: 600;
        color: #D1D5DB;
        text-align: center;
        height: 2.2em; /* Reserve space for 2 lines */
        line-height: 1.1em;
      }
      .visual-filter-btn:hover img {
        transform: scale(1.05);
        border-color: #D97706; /* Gold/Amber */
      }
      .visual-filter-btn.active {
        border-color: #FBBF24; /* Lighter gold for border */
        box-shadow: 0 0 8px #FDE68A, 0 0 15px #FBBF24, 0 0 20px #D97706;
      }
      .visual-filter-btn.active img {
        border-color: #FBBF24;
      }
    `}</style>
);

export default function App() {
  const [lang, setLang] = useState<Language>('ar');
  const [events, setEvents] = useState<Event[]>(initialEvents);
  const [filters, setFilters] = useState<{
    city: string | null;
    category: string | null;
    query: string;
    month: string;
  }>({ city: null, category: null, query: '', month: '' });
  const [isEventModalOpen, setEventModalOpen] = useState(false);
  const [eventToEdit, setEventToEdit] = useState<Event | null>(null);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [isAIAssistantOpen, setAIAssistantOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [authMode, setAuthMode] = useState<AuthMode>('login');
  const [profileUser, setProfileUser] = useState<User | null>(null);


  useEffect(() => {
    document.documentElement.lang = lang;
    document.documentElement.dir = (lang === 'ar' || lang === 'ku') ? 'rtl' : 'ltr';
  }, [lang]);

  const handleDiscoveryFilterChange = useCallback((type: 'city' | 'category', id: string) => {
    setFilters(prev => ({ ...prev, [type]: prev[type] === id ? null : id }));
  }, []);
  
  const handleSearchFilterChange = useCallback((type: string, value: string) => {
    setFilters(prev => ({ ...prev, [type]: value }));
  }, []);

  const handleOpenCreateModal = () => {
    if (!currentUser) {
        handleAuthClick('login');
        return;
    }
    setEventToEdit(null);
    setEventModalOpen(true);
  };

  const handleOpenEditModal = (event: Event) => {
    setEventToEdit(event);
    setEventModalOpen(true);
  };
  
  const handleCloseEventModal = () => {
    setEventModalOpen(false);
    setEventToEdit(null);
  };

  const handleSaveEvent = useCallback((eventData: Omit<Event, 'id' | 'reviews' | 'organizerId'>) => {
    if (eventToEdit) {
      const updatedEvent: Event = { ...eventToEdit, ...eventData };
      setEvents(prevEvents => prevEvents.map(e => e.id === eventToEdit.id ? updatedEvent : e));
      if (selectedEvent?.id === eventToEdit.id) {
          setSelectedEvent(updatedEvent);
      }
    } else {
      if (!currentUser) return;
      const newEvent: Event = {
        ...eventData,
        id: `evt-${Date.now()}`,
        reviews: [],
        organizerId: currentUser.id,
      };
      setEvents(prevEvents => [newEvent, ...prevEvents]);
    }
    handleCloseEventModal();
  }, [eventToEdit, currentUser, selectedEvent?.id]);

  const handleApplyAIData = useCallback((aiData: AppliedAIData) => {
    if (!currentUser) {
        handleAuthClick('login');
        return;
    }
    const newEvent: Event = {
        id: `evt-ai-${Date.now()}`,
        title: aiData.title,
        description: aiData.description,
        date: aiData.date,
        categoryId: aiData.categoryId,
        cityId: aiData.cityId,
        imageUrl: `data:image/png;base64,${aiData.imageBase64}`,
        organizerId: currentUser.id,
        organizerName: currentUser.name,
        venue: cities.find(c => c.id === aiData.cityId)?.name[lang] || 'To be determined', // Placeholder
        organizerPhone: '+964000000000', // Placeholder
        reviews: [],
    };
    setEvents(prev => [newEvent, ...prev]);
  }, [lang, currentUser]);

  const handleAuthClick = useCallback((mode: AuthMode) => {
    setAuthMode(mode);
    setAuthModalOpen(true);
  }, []);
  
  const handleAddReview = useCallback((eventId: string, reviewData: Omit<Review, 'id' | 'user' | 'timestamp'>) => {
    if (!currentUser) {
        handleAuthClick('login');
        return;
    }

    const newReview: Review = {
        id: `r-${Date.now()}`,
        user: currentUser,
        timestamp: new Date().toISOString(),
        ...reviewData,
    };

    setEvents(prevEvents => 
        prevEvents.map(event => {
            if (event.id === eventId) {
                const updatedEvent = { ...event, reviews: [newReview, ...event.reviews] };
                // Also update the detailed view if it's open for this event
                if (selectedEvent?.id === eventId) {
                    setSelectedEvent(updatedEvent);
                }
                return updatedEvent;
            }
            return event;
        })
    );
  }, [currentUser, selectedEvent?.id, handleAuthClick]);

  const handleLogin = (provider: 'email' | 'google' | 'facebook', data?: any) => {
    // Mock login: always log in the first user from the static data for demonstration.
    console.log(`(Mock) Logging in with ${provider}`, data);
    setCurrentUser(users[0]);
    setAuthModalOpen(false);
  };

  const handleSignUp = (data: any) => {
    // Mock signup: create a new user object and set them as the current user.
    console.log('(Mock) Signing up with', data);
    const newUser: User = {
      id: `user-${Date.now()}`,
      name: data.name,
      avatarUrl: `https://picsum.photos/seed/${data.name}/100`,
    };
    setCurrentUser(newUser);
    setAuthModalOpen(false);
  };

  const handleLogout = () => {
    setCurrentUser(null);
  };

  const handleForgotPassword = (email: string) => {
    // Mock password reset: just log it.
    console.log(`(Mock) Sending password reset link to ${email}`);
    // In a real app, this would trigger a call to your auth service.
  };

  const handleViewProfile = useCallback((userId: string) => {
    const user = users.find(u => u.id === userId);
    if (user) {
        setProfileUser(user);
    } else {
        console.warn(`User with ID ${userId} not found.`);
    }
  }, []);

  const filteredEvents = useMemo(() => {
    return events.filter(event => {
      const cityMatch = !filters.city || event.cityId === filters.city;
      const categoryMatch = !filters.category || event.categoryId === filters.category;
      const queryMatch = !filters.query ||
        event.title.toLowerCase().includes(filters.query.toLowerCase()) ||
        event.description.toLowerCase().includes(filters.query.toLowerCase());
      const monthMatch = !filters.month || new Date(event.date).getMonth() === parseInt(filters.month, 10);
      
      return cityMatch && categoryMatch && queryMatch && monthMatch;
    });
  }, [events, filters]);

  return (
    <>
      <GlobalStyles />
      <div className="bg-gray-900 text-gray-200 min-h-screen">
        <Header 
            lang={lang} 
            onLangChange={setLang}
            onOpenCreateModal={handleOpenCreateModal}
            onOpenAIAssistant={() => setAIAssistantOpen(true)}
            currentUser={currentUser}
            onAuthClick={handleAuthClick}
            onLogout={handleLogout}
        />
        <main>
          <FeaturedCarousel events={featuredEvents} lang={lang} onSelectEvent={setSelectedEvent} />
          <SearchBar 
             cities={cities}
             categories={categories}
             lang={lang}
             onFilterChange={handleSearchFilterChange}
             currentFilters={filters}
          />
          <DiscoveryBar
            cities={cities}
            categories={categories}
            onFilterChange={handleDiscoveryFilterChange}
            activeFilters={filters}
            lang={lang}
          />
          <EventGrid
            events={filteredEvents}
            lang={lang}
            onSelectEvent={setSelectedEvent}
          />
        </main>
        
        <CreateEventModal
            isOpen={isEventModalOpen}
            onClose={handleCloseEventModal}
            onSave={handleSaveEvent}
            cities={cities}
            categories={categories}
            lang={lang}
            eventToEdit={eventToEdit}
        />
        
        <EventDetailModal
            event={selectedEvent}
            onClose={() => setSelectedEvent(null)}
            lang={lang}
            onAddReview={handleAddReview}
            currentUser={currentUser}
            onEdit={handleOpenEditModal}
            onViewProfile={handleViewProfile}
        />

        <AIAssistantModal
          isOpen={isAIAssistantOpen}
          onClose={() => setAIAssistantOpen(false)}
          onApply={handleApplyAIData}
          cities={cities}
          categories={categories}
        />
        
        <AuthModal
            isOpen={isAuthModalOpen}
            onClose={() => setAuthModalOpen(false)}
            onLogin={handleLogin}
            onSignUp={handleSignUp}
            initialMode={authMode}
            onForgotPassword={handleForgotPassword}
        />

        <UserProfileModal
          user={profileUser}
          onClose={() => setProfileUser(null)}
        />
      </div>
    </>
  );
}--- START OF FILE data.ts ---

import type { City, Category, Event, User } from './types';

export const users: User[] = [
  { id: 'user-1', name: 'Salar Salah', avatarUrl: 'https://picsum.photos/seed/user1/100' },
  { id: 'user-2', name: 'Layla Ahmed', avatarUrl: 'https://picsum.photos/seed/user2/100' },
];

export const cities: City[] = [
    { id: 'city-baghdad', name: { en: 'Baghdad', ar: 'بغداد', ku: 'بەغدا' }, image: 'https://picsum.photos/seed/baghdad/200' },
    { id: 'city-basra', name: { en: 'Basra', ar: 'البصرة', ku: 'بەسرە' }, image: 'https://picsum.photos/seed/basra/200' },
    { id: 'city-mosul', name: { en: 'Mosul', ar: 'الموصل', ku: 'مووسڵ' }, image: 'https://picsum.photos/seed/mosul/200' },
    { id: 'city-erbil', name: { en: 'Erbil', ar: 'أربيل', ku: 'هەولێر' }, image: 'https://picsum.photos/seed/erbil/200' },
    { id: 'city-sulaymaniyah', name: { en: 'Sulaymaniyah', ar: 'السليمانية', ku: 'سلێمانی' }, image: 'https://picsum.photos/seed/sulaymaniyah/200' },
    { id: 'city-duhok', name: { en: 'Duhok', ar: 'دهوك', ku: 'دهۆک' }, image: 'https://picsum.photos/seed/duhok/200' },
    { id: 'city-kirkuk', name: { en: 'Kirkuk', ar: 'كركوك', ku: 'کەرکووک' }, image: 'https://picsum.photos/seed/kirkuk/200' },
    { id: 'city-fallujah', name: { en: 'Fallujah', ar: 'الفلوجة', ku: 'فەللوجە' }, image: 'https://picsum.photos/seed/fallujah/200' },
    { id: 'city-babylon', name: { en: 'Babylon', ar: 'بابل', ku: 'بابیلۆن' }, image: 'https://picsum.photos/seed/babylon/200' },
    { id: 'city-najaf', name: { en: 'Najaf', ar: 'النجف', ku: 'نەجەف' }, image: 'https://picsum.photos/seed/najaf/200' },
    { id: 'city-karbala', name: { en: 'Karbala', ar: 'كربلاء', ku: 'کەربەلا' }, image: 'https://picsum.photos/seed/karbala/200' },
    { id: 'city-maysan', name: { en: 'Maysan', ar: 'ميسان', ku: 'میسان' }, image: 'https://picsum.photos/seed/maysan/200' },
    { id: 'city-dhi-qar', name: { en: 'Dhi Qar', ar: 'ذي قار', ku: 'زیقار' }, image: 'https://picsum.photos/seed/dhi-qar/200' },
    { id: 'city-muthanna', name: { en: 'Muthanna', ar: 'المثنى', ku: 'موسەننا' }, image: 'https://picsum.photos/seed/muthanna/200' },
    { id: 'city-qadisiyyah', name: { en: 'Qadisiyyah', ar: 'القادسية', ku: 'قادسیە' }, image: 'https://picsum.photos/seed/qadisiyyah/200' },
    { id: 'city-wasit', name: { en: 'Wasit', ar: 'واسط', ku: 'واست' }, image: 'https://picsum.photos/seed/wasit/200' },
    { id: 'city-diyala', name: { en: 'Diyala', ar: 'ديالى', ku: 'دیالە' }, image: 'https://picsum.photos/seed/diyala/200' },
    { id: 'city-samarra', name: { en: 'Samarra', ar: 'سامراء', ku: 'سامەڕا' }, image: 'https://picsum.photos/seed/samarra/200' },
    { id: 'city-al-kut', name: { en: 'Al-Kut', ar: 'الكوت', ku: 'کووت' }, image: 'https://picsum.photos/seed/al-kut/200' },
];

export const categories: Category[] = [
    { id: 'all', name: { en: 'All Events', ar: 'جميع الفعاليات', ku: 'هەموو ڕووداوەکان' }, image: 'https://picsum.photos/seed/all/200' },
    { id: 'cat-1', name: { en: 'Music', ar: 'موسيقى', ku: 'مۆسیقا' }, translation_key: 'music', icon: 'MusicIcon', image: 'https://picsum.photos/seed/music/200' },
    { id: 'cat-2', name: { en: 'Art & Culture', ar: 'فن وثقافة', ku: 'هونەر و کەلتور' }, translation_key: 'art_culture', icon: 'ArtIcon', image: 'https://picsum.photos/seed/art/200' },
    { id: 'cat-3', name: { en: 'Food & Drink', ar: 'طعام وشراب', ku: 'خواردن و خواردنەوە' }, translation_key: 'food_drink', icon: 'FoodIcon', image: 'https://picsum.photos/seed/food/200' },
    { id: 'cat-4', name: { en: 'Tech', ar: 'تكنولوجيا', ku: 'تەکنەلۆژیا' }, translation_key: 'tech', icon: 'TechIcon', image: 'https://picsum.photos/seed/tech/200' },
];

export const initialEvents: Event[] = [
    {
        id: 'event-1',
        title: 'Erbil International Tech Summit',
        organizerId: 'user-1',
        description: 'Join the brightest minds in tech...',
        date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Saad Abdullah Palace, Erbil',
        imageUrl: 'https://picsum.photos/seed/event1/800/600',
        organizerName: users[0].name,
        organizerPhone: '+9647501112233',
        cityId: 'city-erbil',
        categoryId: 'cat-4',
        coordinates: { lat: 36.1911, lon: 44.0094 },
        reviews: [
            { id: 'r1', user: users[1], rating: 5, comment: 'Amazing event! So many great speakers.', timestamp: new Date().toISOString() }
        ],
    },
    {
        id: 'event-2',
        title: 'Traditional Kurdish Music Night',
        organizerId: 'user-2',
        description: 'An evening of soulful melodies under the stars.',
        date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Chavi Land, Sulaymaniyah',
        imageUrl: 'https://picsum.photos/seed/event2/800/600',
        organizerName: users[1].name,
        organizerPhone: '+9647702223344',
        cityId: 'city-sulaymaniyah',
        categoryId: 'cat-1',
        coordinates: { lat: 35.5606, lon: 45.4735 },
        reviews: [],
    },
    {
        id: 'event-3',
        title: 'Baghdad Art Exhibition',
        organizerId: 'user-1',
        description: 'Featuring modern Iraqi artists and sculptors.',
        date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Iraqi Museum, Baghdad',
        imageUrl: 'https://picsum.photos/seed/event3/800/600',
        organizerName: users[0].name,
        organizerPhone: '+9647803334455',
        cityId: 'city-baghdad',
        categoryId: 'cat-2',
        coordinates: { lat: 33.3276, lon: 44.3855 },
        reviews: [
            { id: 'r2', user: users[0], rating: 4, comment: 'Great atmosphere, but could be better organized.', timestamp: new Date().toISOString() },
            { id: 'r3', user: users[1], rating: 5, comment: 'Loved it!', timestamp: new Date().toISOString() }
        ],
    },
     {
        id: 'event-4',
        title: 'Duhok Food Festival',
        organizerId: 'user-2',
        description: 'Taste the best of local and international cuisine.',
        date: new Date(Date.now() + 35 * 24 * 60 * 60 * 1000).toISOString(),
        venue: 'Azadi Park, Duhok',
        imageUrl: 'https://picsum.photos/seed/event4/800/600',
        organizerName: users[1].name,
        organizerPhone: '+9647514445566',
        cityId: 'city-duhok',
        categoryId: 'cat-3',
        coordinates: { lat: 36.8625, lon: 42.9868 },
        reviews: [],
    },
];

export const featuredEvents: Event[] = [
    { ...initialEvents[0], imageUrl: 'https://picsum.photos/seed/featured1/1200/800' },
    { ...initialEvents[1], imageUrl: 'https://picsum.photos/seed/featured2/1200/800' },
    { ...initialEvents[2], imageUrl: 'https://picsum.photos/seed/featured3/1200/800' },
    { ...initialEvents[3], imageUrl: 'https://picsum.photos/seed/featured4/1200/800' },
];--- START OF FILE components/icons.tsx ---

import React from 'react';

export const WhatsAppIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.487 5.235 3.487 8.413 0 6.557-5.338 11.892-11.894 11.892-1.99 0-3.903-.52-5.613-1.476l-6.238 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.267.655 4.398 1.908 6.166l-.387 1.417z" />
  </svg>
);

export const FacebookIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v2.385z" />
  </svg>
);

export const GmailIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z" />
    <polyline points="22,6 12,13 2,6" />
  </svg>
);

export const GoogleIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg className={className} viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
        <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
        <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
        <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.222,0-9.655-3.411-11.303-8H2.529C5.746,37.13,14.06,44,24,44z"/>
        <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.574l6.19,5.238C42.012,36.49,44,30.638,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
    </svg>
);


// FIX: Add onClick to props to make the component clickable for rating input.
export const StarIcon: React.FC<{ className?: string; onClick?: () => void }> = ({ className, onClick }) => (
    <svg className={className} fill="currentColor" viewBox="0 0 20 20" onClick={onClick}>
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
    </svg>
);--- START OF FILE components/Header.tsx ---

import React from 'react';
import type { Language, User, AuthMode } from '../types';
import { LanguageSwitcher } from './LanguageSwitcher';
import { UserMenu } from './UserMenu';

interface HeaderProps {
  lang: Language;
  onLangChange: (lang: Language) => void;
  onOpenCreateModal: () => void;
  onOpenAIAssistant: () => void;
  currentUser: User | null;
  onAuthClick: (mode: AuthMode) => void;
  onLogout: () => void;
}

export const Header: React.FC<HeaderProps> = ({ lang, onLangChange, onOpenCreateModal, onOpenAIAssistant, currentUser, onAuthClick, onLogout }) => {
  const t = {
    signIn: { en: 'Sign In', ar: 'تسجيل الدخول', ku: 'چوونەژوورەوە' },
    signUp: { en: 'Sign Up', ar: 'إنشاء حساب', ku: 'هەژمار دروستکردن' },
    createEvent: { en: 'Create Event', ar: 'إنشاء فعالية', ku: 'ڕووداو دروستبکە' },
    createWithAI: { en: 'Create with AI', ar: 'إنشاء بالذكاء الاصطناعي', ku: 'دروستکردن بە زیرەکی دەستکرد' },
  };

  return (
    <header className="bg-gray-900/80 backdrop-blur-md shadow-lg sticky top-0 z-40">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <div className="flex items-center gap-3">
          <svg className="h-10 w-10 text-amber-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" />
          </svg>
          <h1 className="text-2xl font-bold text-gray-100 tracking-tight">
            {lang === 'en' ? 'Iraq Events' : (lang === 'ku' ? 'ڕووداوەکانی عێراق' : 'فعاليات العراق')}
          </h1>
        </div>
        <div className="flex items-center gap-2 sm:gap-4">
          <LanguageSwitcher currentLang={lang} onLangChange={onLangChange} />
          
          {currentUser ? (
            <UserMenu user={currentUser} onLogout={onLogout} />
          ) : (
            <>
              <button onClick={() => onAuthClick('login')} className="text-sm font-semibold text-gray-300 hover:text-amber-400 px-3 py-2">
                {t.signIn[lang]}
              </button>
              <button onClick={() => onAuthClick('signup')} className="text-sm font-semibold text-gray-900 bg-amber-400 border border-amber-400 rounded-full px-4 py-2 hover:bg-amber-500 transition-colors">
                {t.signUp[lang]}
              </button>
            </>
          )}

          <button 
            onClick={onOpenAIAssistant}
            className="hidden lg:flex items-center gap-2 text-sm font-semibold text-white bg-indigo-600 rounded-full px-4 py-2 hover:bg-indigo-700 transition-colors shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            ✨ {t.createWithAI[lang]}
          </button>
          <button 
            onClick={onOpenCreateModal}
            className="text-sm font-semibold text-gray-900 bg-amber-500 rounded-full px-4 py-2 hover:bg-amber-600 transition-colors shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            {t.createEvent[lang]}
          </button>
        </div>
      </div>
    </header>
  );
};--- START OF FILE components/DiscoveryBar.tsx ---

import React from 'react';
import type { City, Category } from '../types';
import type { Language } from '../types';

interface DiscoveryBarProps {
  cities: City[];
  categories: Category[];
  onFilterChange: (type: 'city' | 'category', id: string) => void;
  activeFilters: { city: string | null; category: string | null };
  lang: Language;
}

export const DiscoveryBar: React.FC<DiscoveryBarProps> = ({ cities, categories, onFilterChange, activeFilters, lang }) => {
  const t = {
    cities: { en: 'Cities', ar: 'المدن', ku: 'شارەکان' },
    categories: { en: 'Categories', ar: 'التصنيفات', ku: 'پۆلەکان' },
  };

  return (
    <div className="py-4 bg-gray-800/50 border-b border-gray-700">
      {/* Cities Section */}
      <section className="mb-4">
        <h3 className="font-bold text-lg text-gray-300 px-4 mb-3">{t.cities[lang]}</h3>
        <div className="scroller-container">
          <div className="scroller" style={{ animationDirection: lang === 'ar' || lang === 'ku' ? 'reverse' : 'normal' }}>
            {[...cities, ...cities].map((city, index) => (
              <button
                key={`${city.id}-${index}`}
                onClick={() => onFilterChange('city', city.id)}
                className={`visual-filter-btn ${activeFilters.city === city.id ? 'active' : ''}`}
              >
                <img src={city.image} alt={city.name[lang]} />
                <span>{city.name[lang]}</span>
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Categories Section */}
      <section>
        <h3 className="font-bold text-lg text-gray-300 px-4 mb-3">{t.categories[lang]}</h3>
        <div className="scroller-container">
          <div className="scroller" style={{ animationName: 'scroll-reverse', animationDirection: lang === 'ar' || lang === 'ku' ? 'reverse' : 'normal' }}>
            {[...categories, ...categories].map((cat, index) => (
              <button
                key={`${cat.id}-${index}`}
                onClick={() => onFilterChange('category', cat.id === 'all' ? '' : cat.id)}
                className={`visual-filter-btn ${activeFilters.category === cat.id || (cat.id === 'all' && !activeFilters.category) ? 'active' : ''}`}
              >
                <img src={cat.image} alt={cat.name[lang]} />
                <span>{cat.name[lang]}</span>
              </button>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
};--- START OF FILE components/EventCard.tsx ---

import React from 'react';
import type { Event } from '../types';
// FIX: Update import path for Language type.
import type { Language } from '../types';

interface EventCardProps {
  event: Event;
  lang: Language;
  onSelect: (event: Event) => void;
}

export const EventCard: React.FC<EventCardProps> = ({ event, lang, onSelect }) => {
  return (
    <div 
      className="bg-gray-800 rounded-xl shadow-lg overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 cursor-pointer group border border-gray-700"
      onClick={() => onSelect(event)}
    >
      <div className="h-48 w-full overflow-hidden">
        <img className="h-full w-full object-cover group-hover:scale-110 transition-transform duration-500" src={event.imageUrl} alt={event.title} />
      </div>
      <div className="p-4">
        <h4 className="text-lg font-bold text-gray-100 truncate">{event.title}</h4>
        <p className="text-sm text-gray-400 mt-1">
          {new Date(event.date).toLocaleDateString(lang === 'en' ? 'en-US' : lang === 'ku' ? 'ku-IQ' : 'ar-IQ', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </p>
        <p className="text-sm text-gray-500 mt-1">{event.venue}</p>
        <div className="flex items-center mt-3">
          <span className="text-xs font-semibold text-amber-300 bg-amber-900/50 rounded-full px-2 py-0.5">
            {event.organizerName}
          </span>
        </div>
      </div>
    </div>
  );
};--- START OF FILE components/EventGrid.tsx ---

import React from 'react';
import type { Event } from '../types';
// FIX: Update import path for Language type.
import type { Language } from '../types';
import { EventCard } from './EventCard';

interface EventGridProps {
  events: Event[];
  lang: Language;
  onSelectEvent: (event: Event) => void;
}

export const EventGrid: React.FC<EventGridProps> = ({ events, lang, onSelectEvent }) => {
  const t = {
    upcoming: { en: 'Upcoming Events', ar: 'الفعاليات القادمة' , ku: 'ڕووداوە چاوەڕوانکراوەکان' },
    noEvents: { en: 'No events match your criteria.', ar: 'لا توجد فعاليات تطابق بحثك.' , ku: 'هیچ ڕووداوێک لەگەڵ پێوەرەکانی تۆ ناگونجێت.'},
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold text-gray-100 mb-6">{t.upcoming[lang]}</h2>
      {events.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {events.map((event) => (
            <EventCard key={event.id} event={event} lang={lang} onSelect={onSelectEvent} />
          ))}
        </div>
      ) : (
        <div className="text-center py-16 bg-gray-800 rounded-lg">
          <p className="text-xl text-gray-500">{t.noEvents[lang]}</p>
        </div>
      )}
    </div>
  );
};--- START OF FILE components/CreateEventModal.tsx ---

import React, { useState, useId, useEffect } from 'react';
import type { City, Category, Event } from '../types';
import type { Language } from '../types';

interface CreateEventModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (eventData: Omit<Event, 'id' | 'reviews' | 'organizerId'>) => void;
  cities: City[];
  categories: Category[];
  lang: Language;
  eventToEdit: Event | null;
}

const initialFormData = {
    title: '',
    organizerName: '',
    categoryId: '',
    cityId: '',
    date: '',
    venue: '',
    description: '',
    organizerPhone: '',
    imageUrl: '',
};

export const CreateEventModal: React.FC<CreateEventModalProps> = ({ isOpen, onClose, onSave, cities, categories, lang, eventToEdit }) => {
  const [formData, setFormData] = useState(initialFormData);
  const [error, setError] = useState('');
  const formId = useId();
  const isEditMode = !!eventToEdit;

  useEffect(() => {
    if (isOpen) {
        if (eventToEdit) {
            setFormData({
                title: eventToEdit.title,
                organizerName: eventToEdit.organizerName,
                categoryId: eventToEdit.categoryId,
                cityId: eventToEdit.cityId,
                date: eventToEdit.date.substring(0, 16), // Format for datetime-local
                venue: eventToEdit.venue,
                description: eventToEdit.description,
                organizerPhone: eventToEdit.organizerPhone,
                imageUrl: eventToEdit.imageUrl,
            });
        } else {
            setFormData({
                ...initialFormData,
                imageUrl: `https://picsum.photos/seed/${Math.random()}/800/600`,
            });
        }
        setError('');
    }
  }, [isOpen, eventToEdit]);

  if (!isOpen) return null;
  
  const t = {
    title: { en: 'Create New Event', ar: 'إنشاء فعالية جديدة', ku: 'دروستکردنی ڕووداوی نوێ' },
    editTitle: { en: 'Edit Event', ar: 'تعديل الفعالية', ku: 'دەستکاری ڕووداو' },
    eventTitle: { en: 'Event Title', ar: 'عنوان الفعالية', ku: 'ناوی ڕووداو' },
    organizerName: { en: 'Organizer Name', ar: 'اسم المنظم', ku: 'ناوی ڕێکخەر' },
    category: { en: 'Category', ar: 'التصنيف', ku: 'پۆل' },
    city: { en: 'City', ar: 'المدينة', ku: 'شار' },
    date: { en: 'Date and Time', ar: 'التاريخ والوقت', ku: 'کات و بەروار' },
    venue: { en: 'Venue/Address', ar: 'المكان/العنوان', ku: 'شوێن/ناونیشان' },
    description: { en: 'Description', ar: 'الوصف', ku: 'پێناسە' },
    phone: { en: 'Organizer Phone', ar: 'رقم هاتف المنظم', ku: 'ژمارەی مۆبایلی ڕێکخەر' },
    image: { en: 'Featured Image URL', ar: 'رابط الصورة البارزة', ku: 'لینکى وێنەى سەرەکی' },
    submit: { en: 'Create Event', ar: 'إنشاء الفعالية', ku: 'دروستکردنی ڕووداو' },
    saveChanges: { en: 'Save Changes', ar: 'حفظ التغييرات', ku: 'پاشەکەوتکردنی گۆڕانکارییەکان' },
    cancel: { en: 'Cancel', ar: 'إلغاء', ku: 'هەڵوەشاندنەوە' },
    error: { en: 'Please fill out all required fields.', ar: 'يرجى ملء جميع الحقول المطلوبة.', ku: 'تکایە هەموو خانە داواکراوەکان پڕبکەرەوە.' }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const requiredFields: (keyof typeof formData)[] = ['title', 'organizerName', 'categoryId', 'cityId', 'date', 'venue', 'description', 'organizerPhone'];
    if (requiredFields.some(field => !formData[field])) {
        setError(t.error[lang]);
        return;
    }
    const { imageUrl, ...rest } = formData;
    const dataToSend = { ...rest, imageUrl: imageUrl || `https://picsum.photos/seed/${Math.random()}/800/600` };
    
    onSave(dataToSend);
  };

  const inputClasses = "mt-1 block w-full px-3 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500";

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-4 border-b border-gray-700 pb-3">
            <h2 className="text-2xl font-bold text-gray-100">{isEditMode ? t.editTitle[lang] : t.title[lang]}</h2>
            <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-300 text-3xl leading-none">&times;</button>
          </div>
          <div className="space-y-4">
            {Object.keys(t)
                .filter(k => !['title', 'submit', 'cancel', 'error', 'editTitle', 'saveChanges'].includes(k))
                .map(key => {
              const fieldKey = key as keyof Omit<typeof t, 'title'|'submit'|'cancel'|'error'|'editTitle'|'saveChanges'>;
              const inputName = key === 'city' ? 'cityId' : key === 'category' ? 'categoryId' : key;
              
              const isSelect = key === 'city' || key === 'category';
              const isTextarea = key === 'description';
              
              return (
                <div key={key}>
                  <label htmlFor={`${formId}-${inputName}`} className="block text-sm font-medium text-gray-400 mb-1">{t[fieldKey][lang]}</label>
                  {isSelect ? (
                    <select id={`${formId}-${inputName}`} name={inputName} value={formData[inputName as 'cityId' | 'categoryId']} onChange={handleChange} className={inputClasses}>
                      <option value="">{lang === 'en' ? 'Select...' : (lang === 'ku' ? 'هەڵبژێرە...' : 'اختر...')}</option>
                      {(key === 'city' ? cities : categories.filter(c => c.id !== 'all')).map(item => (
                        <option key={item.id} value={item.id}>{item.name?.[lang]}</option>
                      ))}
                    </select>
                  ) : isTextarea ? (
                     <textarea id={`${formId}-${inputName}`} name={inputName} value={formData[inputName as 'description']} onChange={handleChange} rows={4} className={inputClasses} />
                  ) : (
                    <input type={key === 'date' ? 'datetime-local' : 'text'} id={`${formId}-${inputName}`} name={inputName} value={(formData as any)[inputName]} onChange={handleChange} className={inputClasses} />
                  )}
                </div>
              );
            })}
          </div>
          {error && <p className="text-red-400 text-sm mt-4">{error}</p>}
          <div className="mt-8 flex justify-end gap-3">
            <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-600 text-gray-200 rounded-md hover:bg-gray-500">{t.cancel[lang]}</button>
            <button type="submit" className="px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700">{isEditMode ? t.saveChanges[lang] : t.submit[lang]}</button>
          </div>
        </form>
      </div>
    </div>
  );
};--- START OF FILE components/EventDetailModal.tsx ---

import React, { useState, useEffect, useRef } from 'react';
import type { Event, Language, Review, User } from '../types';
import { WhatsAppIcon, FacebookIcon, GmailIcon, StarIcon } from './icons';

declare const L: any;

interface EventDetailModalProps {
  event: Event | null;
  onClose: () => void;
  lang: Language;
  onAddReview: (eventId: string, review: Omit<Review, 'id' | 'user' | 'timestamp'>) => void;
  currentUser: User | null;
  onEdit: (event: Event) => void;
  onViewProfile: (userId: string) => void;
}

const StarRating: React.FC<{ rating: number; setRating?: (rating: number) => void }> = ({ rating, setRating }) => (
    <div className="flex items-center">
        {[1, 2, 3, 4, 5].map((star) => (
            <StarIcon
                key={star}
                className={`w-6 h-6 ${rating >= star ? 'text-amber-400' : 'text-gray-600'} ${setRating ? 'cursor-pointer' : ''}`}
                onClick={() => setRating?.(star)}
            />
        ))}
    </div>
);

interface EventMapProps {
    coordinates: { lat: number; lon: number };
    venueName: string;
}

const EventMap: React.FC<EventMapProps> = ({ coordinates, venueName }) => {
    const mapContainerRef = useRef<HTMLDivElement>(null);
    const mapRef = useRef<any>(null);

    useEffect(() => {
        if (typeof L === 'undefined' || !mapContainerRef.current) {
            return;
        }

        mapRef.current = L.map(mapContainerRef.current).setView([coordinates.lat, coordinates.lon], 15);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(mapRef.current);

        L.marker([coordinates.lat, coordinates.lon]).addTo(mapRef.current)
            .bindPopup(venueName)
            .openPopup();

        return () => {
            if (mapRef.current) {
                mapRef.current.remove();
                mapRef.current = null;
            }
        };
    }, [coordinates, venueName]);

    return <div ref={mapContainerRef} className="h-64 w-full rounded-lg z-0" />;
};


export const EventDetailModal: React.FC<EventDetailModalProps> = ({ event, onClose, lang, onAddReview, currentUser, onEdit, onViewProfile }) => {
  const [newComment, setNewComment] = useState('');
  const [newRating, setNewRating] = useState(0);

  useEffect(() => {
      if (event) {
          setNewComment('');
          setNewRating(0);
      }
  }, [event]);

  if (!event) return null;

  const isOwner = currentUser && event.organizerId === currentUser.id;

  const getLocale = () => {
    if (lang === 'ar') return 'ar-IQ';
    if (lang === 'ku') return 'ku-IQ';
    return 'en-US';
  }

  const t = {
    organizerContact: { en: 'Contact Organizer', ar: 'اتصل بالمنظم', ku: 'پەیوەندی بە ڕێکخەر' },
    chat: { en: 'Chat on Platform', ar: 'مراسلة على المنصة', ku: 'گفتوگۆ لەسەر پلاتفۆرم' },
    whatsapp: { en: 'Message on WhatsApp', ar: 'مراسلة عبر واتساب', ku: 'نامەناردن لە وەتسئەپ' },
    reviews: { en: 'Reviews & Comments', ar: 'التقييمات والتعليقات', ku: 'پێداچوونەوە و کۆمێنتەکان' },
    addReview: { en: 'Add your review', ar: 'أضف تقييمك', ku: 'پێداچوونەوەی خۆت زیاد بکە' },
    submitReview: { en: 'Submit Review', ar: 'إرسال التقييم', ku: 'ناردنی پێداچوونەوە' },
    share: { en: 'Share Event', ar: 'شارك الفعالية', ku: 'هاوبەشی پێکردنی ڕووداو' },
    location: { en: 'Location', ar: 'الموقع', ku: 'شوێن' },
    loginToReview: { en: 'Please sign in to leave a review.', ar: 'يرجى تسجيل الدخول لترك مراجعة.', ku: 'تکایە بچۆ ژوورەوە بۆ دانانی پێداچوونەوە.' },
    editEvent: { en: 'Edit Event', ar: 'تعديل الفعالية', ku: 'دەستکاری ڕووداو' },
    viewProfile: { en: 'View Profile', ar: 'عرض الملف الشخصي', ku: 'پڕۆفایل ببینە' }
  };
  
  const handleAddReview = () => {
    if (newComment && newRating > 0) {
        onAddReview(event.id, {
            rating: newRating,
            comment: newComment,
        });
        setNewComment('');
        setNewRating(0);
    }
  };

  const whatsappLink = `https://wa.me/${event.organizerPhone.replace(/\D/g, '')}?text=${encodeURIComponent(`Hello, I have a question about the event: ${event.title}`)}`;
  const gmailLink = `mailto:?subject=${encodeURIComponent(event.title)}&body=${encodeURIComponent(`Check out this event: ${event.title}\n\n${event.description}\n\nDate: ${new Date(event.date).toLocaleString()}`)}`;
  const facebookLink = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}`;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 p-4">
      <div className="bg-gray-800 text-gray-200 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="relative">
            <img src={event.imageUrl} alt={event.title} className="w-full h-64 object-cover rounded-t-lg" />
            <button onClick={onClose} className="absolute top-4 right-4 rtl:left-4 rtl:right-auto bg-black/60 text-white rounded-full p-2 leading-none text-2xl hover:bg-black/80">&times;</button>
        </div>
        <div className="p-6">
          <div className="flex justify-between items-start gap-4">
            <div className="flex-grow">
              <h2 className="text-3xl font-bold text-gray-100">{event.title}</h2>
              <div className="flex items-center gap-3 mt-2">
                <p className="text-lg text-amber-400">{event.organizerName}</p>
                <button 
                  onClick={() => onViewProfile(event.organizerId)}
                  className="text-xs font-semibold text-gray-300 hover:text-amber-400 underline"
                >
                  ({t.viewProfile[lang]})
                </button>
              </div>
            </div>
            {isOwner && (
              <button 
                onClick={() => onEdit(event)}
                className="flex-shrink-0 px-4 py-2 bg-gray-600 text-gray-200 rounded-md hover:bg-gray-500 text-sm font-semibold transition-colors"
              >
                {t.editEvent[lang]}
              </button>
            )}
          </div>

          <p className="text-md text-gray-400 mt-1">{new Date(event.date).toLocaleString(getLocale(), { dateStyle: 'full', timeStyle: 'short' })}</p>
          <p className="text-md text-gray-500 mt-1">{event.venue}</p>
          
          <p className="text-gray-300 mt-4 whitespace-pre-wrap">{event.description}</p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
              {/* Contact & Share */}
              <div className="space-y-4">
                  {event.coordinates && (
                    <>
                      <h3 className="font-bold text-lg border-b border-gray-700 pb-2">{t.location[lang]}</h3>
                      <EventMap coordinates={event.coordinates} venueName={event.venue} />
                    </>
                  )}
                  <h3 className={`font-bold text-lg border-b border-gray-700 pb-2 ${event.coordinates ? 'pt-4' : ''}`}>{t.organizerContact[lang]}</h3>
                  <button className="w-full text-left p-3 bg-gray-700 rounded-lg hover:bg-gray-600">{t.chat[lang]}</button>
                  <a href={whatsappLink} target="_blank" rel="noopener noreferrer" className="w-full flex items-center gap-3 p-3 bg-green-900/50 rounded-lg hover:bg-green-800/50">
                    <WhatsAppIcon className="w-6 h-6 text-green-400" /> {t.whatsapp[lang]}
                  </a>
                  
                  <h3 className="font-bold text-lg border-b border-gray-700 pb-2 pt-4">{t.share[lang]}</h3>
                  <div className="flex gap-2">
                    <a href={gmailLink} className="flex-1 p-2 bg-red-900/50 rounded-lg flex justify-center items-center hover:bg-red-800/50"><GmailIcon className="w-6 h-6 text-red-400"/></a>
                    <a href={facebookLink} target="_blank" rel="noopener noreferrer" className="flex-1 p-2 bg-blue-900/50 rounded-lg flex justify-center items-center hover:bg-blue-800/50"><FacebookIcon className="w-6 h-6 text-blue-400"/></a>
                    <a href={whatsappLink} target="_blank" rel="noopener noreferrer" className="flex-1 p-2 bg-green-900/50 rounded-lg flex justify-center items-center hover:bg-green-800/50"><WhatsAppIcon className="w-6 h-6 text-green-400"/></a>
                  </div>
              </div>
              {/* Reviews */}
              <div className="space-y-4">
                  <h3 className="font-bold text-lg border-b border-gray-700 pb-2">{t.reviews[lang]}</h3>
                  <div className="space-y-3 max-h-48 overflow-y-auto pr-2">
                    {event.reviews.map(review => (
                        <div key={review.id} className="flex gap-3">
                            <img src={review.user.avatarUrl} alt={review.user.name} className="w-10 h-10 rounded-full" />
                            <div>
                                <p className="font-semibold text-gray-100">{review.user.name}</p>
                                <StarRating rating={review.rating} />
                                <p className="text-sm text-gray-400">{review.comment}</p>
                            </div>
                        </div>
                    ))}
                    {event.reviews.length === 0 && <p className="text-sm text-gray-500">{lang === 'en' ? 'No reviews yet.' : (lang === 'ku' ? 'هیچ پێداچوونەوەیەک نیە.' : 'لا توجد تقييمات بعد.')}</p>}
                  </div>
                  <div className="border-t border-gray-700 pt-4">
                      {currentUser ? (
                        <>
                          <h4 className="font-semibold mb-2">{t.addReview[lang]}</h4>
                          <StarRating rating={newRating} setRating={setNewRating} />
                          <textarea value={newComment} onChange={(e) => setNewComment(e.target.value)} className="w-full border border-gray-600 bg-gray-700 text-gray-200 rounded-lg p-2 mt-2 focus:ring-amber-500 focus:border-amber-500" placeholder={lang === 'en' ? 'Your comment...' : (lang === 'ku' ? 'کۆمێنتی تۆ...' : 'تعليقك...')}></textarea>
                          <button onClick={handleAddReview} className="mt-2 px-4 py-2 bg-amber-600 text-white rounded-md text-sm hover:bg-amber-700">{t.submitReview[lang]}</button>
                        </>
                      ) : (
                         <div className="text-center p-4 bg-gray-700/50 rounded-lg">
                            <p className="text-gray-400">{t.loginToReview[lang]}</p>
                         </div>
                      )}
                  </div>
              </div>
          </div>
        </div>
      </div>
    </div>
  );
};--- START OF FILE components/FeaturedCarousel.tsx ---

import React, { useState, useEffect, useCallback } from 'react';
import type { Event, Language } from '../types';

interface FeaturedCarouselProps {
    events: Event[];
    lang: Language;
    onSelectEvent: (event: Event) => void;
}

export const FeaturedCarousel: React.FC<FeaturedCarouselProps> = ({ events, lang, onSelectEvent }) => {
    const [currentIndex, setCurrentIndex] = useState(0);

    const nextSlide = useCallback(() => {
        setCurrentIndex((prevIndex) => (prevIndex === events.length - 1 ? 0 : prevIndex + 1));
    }, [events.length]);

    useEffect(() => {
        const slideInterval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
        return () => clearInterval(slideInterval);
    }, [nextSlide]);

    const goToSlide = (index: number) => {
        setCurrentIndex(index);
    };

    if (!events || events.length === 0) {
        return null;
    }

    return (
        <div className="relative w-full h-64 md:h-96 overflow-hidden">
            <div className="absolute inset-0 flex transition-transform duration-700 ease-in-out" style={{ transform: `translateX(-${currentIndex * 100}%)` }}>
                {events.map((event) => (
                    <div key={event.id} className="relative w-full h-full flex-shrink-0" onClick={() => onSelectEvent(event)}>
                        <img src={event.imageUrl} alt={event.title} className="w-full h-full object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        <div className="absolute bottom-0 left-0 p-4 md:p-8 text-white">
                            <h2 className="text-xl md:text-3xl font-bold">{event.title}</h2>
                            <p className="text-sm md:text-md mt-2">{event.venue}</p>
                        </div>
                    </div>
                ))}
            </div>

            <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
                {events.map((_, index) => (
                    <button
                        key={index}
                        onClick={() => goToSlide(index)}
                        className={`w-3 h-3 rounded-full transition-colors ${currentIndex === index ? 'bg-amber-400' : 'bg-gray-400/50 hover:bg-gray-400'}`}
                        aria-label={`Go to slide ${index + 1}`}
                    />
                ))}
            </div>
        </div>
    );
};--- START OF FILE components/SearchBar.tsx ---

import React from 'react';
import type { City, Category, Language } from '../types';

interface SearchBarProps {
    cities: City[];
    categories: Category[];
    lang: Language;
    onFilterChange: (type: string, value: string) => void;
    currentFilters: {
        query: string;
        month: string;
        category: string | null;
        city: string | null;
    };
}

const months = [
    { num: 0, names: { en: 'January', ar: 'يناير', ku: 'کانوونی دووەم' } },
    { num: 1, names: { en: 'February', ar: 'فبراير', ku: 'شوبات' } },
    { num: 2, names: { en: 'March', ar: 'مارس', ku: 'ئازار' } },
    { num: 3, names: { en: 'April', ar: 'أبريل', ku: 'نیسان' } },
    { num: 4, names: { en: 'May', ar: 'مايو', ku: 'ئایار' } },
    { num: 5, names: { en: 'June', ar: 'يونيو', ku: 'حوزەیران' } },
    { num: 6, names: { en: 'July', ar: 'يوليو', ku: 'تەمووز' } },
    { num: 7, names: { en: 'August', ar: 'أغسطس', ku: 'ئاب' } },
    { num: 8, names: { en: 'September', ar: 'سبتمبر', ku: 'ئەیلوول' } },
    { num: 9, names: { en: 'October', ar: 'أكتوبر', ku: 'تشرینی یەکەم' } },
    { num: 10, names: { en: 'November', ar: 'نوفمبر', ku: 'تشرینی دووەم' } },
    { num: 11, names: { en: 'December', ar: 'ديسمبر', ku: 'کانوونی یەکەم' } },
];

export const SearchBar: React.FC<SearchBarProps> = ({ cities, categories, lang, onFilterChange, currentFilters }) => {
    
    const t = {
        searchPlaceholder: { en: 'Search events by title or description...', ar: 'ابحث عن الفعاليات بالاسم أو الوصف...', ku: 'بگەڕێ بۆ ڕووداوەکان بە ناونیشان یان پێناسە...' },
        allMonths: { en: 'All Months', ar: 'كل الشهور', ku: 'هەموو مانگەکان' },
        allCategories: { en: 'All Categories', ar: 'كل التصنيفات', ku: 'هەموو پۆلەکان' },
        allCities: { en: 'All Cities', ar: 'كل المدن', ku: 'هەموو شارەکان' },
    };

    const selectClasses = "w-full bg-gray-700 border border-gray-600 text-gray-200 text-sm rounded-lg focus:ring-amber-500 focus:border-amber-500 block p-2.5";

    return (
        <div className="bg-gray-800 p-4">
            <div className="container mx-auto">
                <div className="relative mb-4">
                    <div className="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                        <svg className="w-4 h-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                        </svg>
                    </div>
                    <input
                        type="search"
                        id="event-search"
                        className="block w-full p-4 ps-10 text-sm text-gray-100 border border-gray-600 rounded-lg bg-gray-700 focus:ring-amber-500 focus:border-amber-500"
                        placeholder={t.searchPlaceholder[lang]}
                        value={currentFilters.query}
                        onChange={(e) => onFilterChange('query', e.target.value)}
                    />
                </div>
                <div className="flex flex-col sm:flex-row gap-4">
                    <select id="month-filter" className={selectClasses} value={currentFilters.month} onChange={(e) => onFilterChange('month', e.target.value)}>
                        <option value="">{t.allMonths[lang]}</option>
                        {months.map(m => <option key={m.num} value={m.num}>{m.names[lang]}</option>)}
                    </select>
                    <select id="category-filter" className={selectClasses} value={currentFilters.category || ''} onChange={(e) => onFilterChange('category', e.target.value === 'all' ? '' : e.target.value)}>
                        {categories.map(c => <option key={c.id} value={c.id}>{c.name[lang]}</option>)}
                    </select>
                    <select id="city-filter" className={selectClasses} value={currentFilters.city || ''} onChange={(e) => onFilterChange('city', e.target.value)}>
                        <option value="">{t.allCities[lang]}</option>
                        {cities.map(c => <option key={c.id} value={c.id}>{c.name[lang]}</option>)}
                    </select>
                </div>
            </div>
        </div>
    );
};--- START OF FILE components/UserMenu.tsx ---

import React, { useState, useRef, useEffect } from 'react';
import type { User } from '../types';

interface UserMenuProps {
  user: User;
  onLogout: () => void;
}

export const UserMenu: React.FC<UserMenuProps> = ({ user, onLogout }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button onClick={() => setIsOpen(!isOpen)} className="flex items-center gap-2 focus:outline-none">
        <img src={user.avatarUrl} alt={user.name} className="w-8 h-8 rounded-full border-2 border-amber-400" />
        <span className="hidden sm:block text-sm font-medium text-gray-300">{user.name}</span>
      </button>
      {isOpen && (
        <div className="absolute right-0 rtl:right-auto rtl:left-0 mt-2 w-48 rounded-md shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5 z-20 border border-gray-700">
          <div className="py-1">
            <button
              onClick={onLogout}
              className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-gray-300 hover:bg-gray-700"
            >
              Logout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};--- START OF FILE components/AuthModal.tsx ---

import React, { useState, useEffect } from 'react';
import { GoogleIcon, FacebookIcon } from './icons';
import type { AuthMode } from '../types';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onLogin: (provider: 'email' | 'google' | 'facebook', data?: any) => void;
  onSignUp: (data: any) => void;
  initialMode: AuthMode;
  onForgotPassword: (email: string) => void;
}

export const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose, onLogin, onSignUp, initialMode, onForgotPassword }) => {
  const [mode, setMode] = useState<AuthMode>(initialMode);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState(''); // For signup
  const [error, setError] = useState('');
  const [resetSent, setResetSent] = useState(false);

  useEffect(() => {
    if (isOpen) {
        setMode(initialMode);
        setError('');
        setEmail('');
        setPassword('');
        setName('');
        setResetSent(false);
    }
  }, [isOpen, initialMode]);

  if (!isOpen) return null;

  const handleEmailSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (mode === 'login') {
      if (!email || !password) {
        setError('Please enter email and password.');
        return;
      }
      onLogin('email', { email, password });
    } else { // signup
      if (!name || !email || !password) {
        setError('Please fill all fields.');
        return;
      }
      onSignUp({ name, email, password });
    }
  };

  const handleForgotPasswordSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (!email) {
      setError('Please enter your email address.');
      return;
    }
    onForgotPassword(email);
    setResetSent(true);
  };

  const switchMode = (newMode: 'login' | 'signup') => {
    setMode(newMode);
    setError('');
    // Keep email if user is switching between login/signup
    setPassword('');
    setName('');
  };

  const inputClasses = "mt-1 block w-full px-3 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500";
  
  const renderLoginSignUp = () => (
    <>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-gray-100">{mode === 'login' ? 'Sign In' : 'Sign Up'}</h2>
        <button onClick={onClose} className="text-gray-500 hover:text-gray-300 text-3xl leading-none">&times;</button>
      </div>

      <div className="flex flex-col gap-3">
         <button onClick={() => onLogin('google')} className="w-full flex items-center justify-center gap-3 px-4 py-2 border border-gray-600 rounded-md hover:bg-gray-700">
            <GoogleIcon className="w-5 h-5" />
            <span className="text-sm font-medium text-gray-200">Continue with Google</span>
         </button>
         <button onClick={() => onLogin('facebook')} className="w-full flex items-center justify-center gap-3 px-4 py-2 bg-[#1877F2] text-white rounded-md hover:bg-[#166eab]">
            <FacebookIcon className="w-5 h-5" />
            <span className="text-sm font-medium">Continue with Facebook</span>
         </button>
      </div>
      
      <div className="flex items-center my-4">
        <div className="flex-grow border-t border-gray-600"></div>
        <span className="flex-shrink mx-4 text-gray-400 text-sm">OR</span>
        <div className="flex-grow border-t border-gray-600"></div>
      </div>

      <form onSubmit={handleEmailSubmit} className="space-y-4">
        {mode === 'signup' && (
          <div>
            <label className="block text-sm font-medium text-gray-400">Name</label>
            <input type="text" value={name} onChange={e => setName(e.target.value)} className={inputClasses} required />
          </div>
        )}
        <div>
          <label className="block text-sm font-medium text-gray-400">Email</label>
          <input type="email" value={email} onChange={e => setEmail(e.target.value)} className={inputClasses} required />
        </div>
        <div>
          <div className="flex justify-between items-center">
            <label className="block text-sm font-medium text-gray-400">Password</label>
            {mode === 'login' && (
              <button type="button" onClick={() => setMode('forgot-password')} className="text-xs font-medium text-amber-400 hover:underline focus:outline-none">
                Forgot Password?
              </button>
            )}
          </div>
          <input type="password" value={password} onChange={e => setPassword(e.target.value)} className={inputClasses} required />
        </div>
        {error && <p className="text-red-400 text-sm">{error}</p>}
        <button type="submit" className="w-full px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700">
          {mode === 'login' ? 'Sign In' : 'Create Account'}
        </button>
      </form>

      <div className="mt-4 text-center">
        <p className="text-sm text-gray-400">
          {mode === 'login' ? "Don't have an account?" : "Already have an account?"}
          <button onClick={() => switchMode(mode === 'login' ? 'signup' : 'login')} className="font-medium text-amber-400 hover:underline ltr:ml-1 rtl:mr-1">
            {mode === 'login' ? 'Sign Up' : 'Sign In'}
          </button>
        </p>
      </div>
    </>
  );

  const renderForgotPassword = () => (
    <>
      <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-gray-100">Reset Password</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-300 text-3xl leading-none">&times;</button>
      </div>
      {resetSent ? (
        <div className="text-center py-4">
          <p className="text-gray-300">If an account with that email exists, we've sent instructions to reset your password.</p>
          <button onClick={() => setMode('login')} className="mt-6 w-full px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700">
              Back to Sign In
          </button>
        </div>
      ) : (
        <form onSubmit={handleForgotPasswordSubmit} className="space-y-4">
          <p className="text-sm text-gray-400">Enter your email address and we'll send you a link to reset your password.</p>
          <div>
              <label className="block text-sm font-medium text-gray-400">Email</label>
              <input type="email" value={email} onChange={e => setEmail(e.target.value)} className={inputClasses} required />
          </div>
          {error && <p className="text-red-400 text-sm">{error}</p>}
          <button type="submit" className="w-full px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700">
              Send Reset Link
          </button>
          <div className="text-center pt-2">
              <button type="button" onClick={() => setMode('login')} className="font-medium text-amber-400 hover:underline">
                  Back to Sign In
              </button>
          </div>
        </form>
      )}
    </>
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
        {mode === 'forgot-password' ? renderForgotPassword() : renderLoginSignUp()}
      </div>
    </div>
  );
};--- START OF FILE components/UserProfileModal.tsx ---

import React from 'react';
import type { User } from '../types';

interface UserProfileModalProps {
  user: User | null;
  onClose: () => void;
}

export const UserProfileModal: React.FC<UserProfileModalProps> = ({ user, onClose }) => {
  if (!user) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 p-4">
      <div className="bg-gray-800 text-gray-200 rounded-lg shadow-xl w-full max-w-sm p-8 text-center relative">
        <button onClick={onClose} className="absolute top-3 right-3 rtl:left-3 rtl:right-auto text-gray-500 hover:text-gray-300 text-3xl leading-none">&times;</button>
        <img src={user.avatarUrl} alt={user.name} className="w-32 h-32 rounded-full mx-auto border-4 border-amber-400 shadow-lg" />
        <h2 className="text-2xl font-bold text-gray-100 mt-4">{user.name}</h2>
        <p className="text-amber-400 mt-1">Event Organizer</p>
        
        <div className="mt-6 border-t border-gray-700 pt-4">
            <h3 className="text-lg font-semibold text-gray-100">Contact Info</h3>
            <p className="text-gray-400 mt-2 text-sm">Contact information is available via the event page.</p>
        </div>
      </div>
    </div>
  );
};